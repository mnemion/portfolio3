package portfolio;

import java.net.Inet4Address;
import java.net.InetAddress;
import java.security.MessageDigest;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.ibatis.session.RowBounds;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
public class webpage {
	@Resource(name="data")
	private module sm;
	
	//퇴직 근무 처리 적용
	@RequestMapping("/changeStatus.do")
	public String changeStatus(datadto dto, HttpServletRequest req, Model m) throws Exception {
		if (dto.getStatus().equals("퇴직중")) {
	        // 로그인 시도 횟수를 5로 설정
	        sm.setLoginAttemptsToFive(dto);
	    } else if (dto.getStatus().equals("근무중")) {
	        // 로그인 시도 횟수를 0으로 초기화
	        sm.resetLoginAttempts(dto);
	    }
		
	    sm.updateStatus(dto);
	    return "redirect:/config_main.do";
	}
	
	// 검색에 따른 관리자 목록을 가져옴
	@RequestMapping(value = "/searchAdmins.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public List<datadto> searchAdmins(@RequestParam("searchPart") String searchPart, @RequestParam("searchText") String searchText) {
	    return sm.searchAdmins(searchPart, searchText);
	}

	
	// 소속에 따른 관리자 목록을 가져옴
	@RequestMapping(value = "/getAdminsByAffiliation.do", method = RequestMethod.POST, produces = "application/json; charset=UTF-8")
	@ResponseBody
	public List<datadto> getAdminsByAffiliation(@RequestParam("affiliation") String affiliation) {
	    if ("전체".equals(affiliation) || "".equals(affiliation)) {
	        return sm.getAdmins(); // 모든 관리자를 반환
	    }
	    return sm.getAdminsByAffiliation(affiliation);
	}
	
	// 현황 업데이트
	@RequestMapping("/config_main.do")
	public String updateStatus(datadto dto, HttpServletRequest req, Model m) throws Exception {
		// 현황 근퇴 처리
		InetAddress inet = Inet4Address.getLocalHost();
	    String ip = inet.getHostAddress();
	    dto.setIp(ip);
		
	    // 기존의 상태 업데이트 로직
	    String newStatus = req.getParameter("newStatus"); // 새로운 상태를 받습니다.
	    dto.setStatus(newStatus);
	    sm.getCurrentStatus(dto); // 상태를 업데이트합니다.

	    // 페이지 번호와 한 페이지에 표시할 개수
	    String pageStr = req.getParameter("page");
	    int page = (pageStr != null) ? Integer.parseInt(pageStr) : 1; // 페이지 번호가 없을 경우 기본값은 1
	    int limit = 10; // 한 페이지에 표시할 관리자 수

	    // 시작 인덱스 계산
	    int start = (page - 1) * limit;
	    RowBounds rowBounds = new RowBounds(start, limit);

	    // 관리자 목록을 가져와 Model에 추가
	    List<datadto> admins = sm.getAdmins(rowBounds);
	    m.addAttribute("admins", admins);

	    // 전체 관리자 수를 가져와 Model에 추가
	    int totalAdmins = sm.getTotalAdmins();
	    m.addAttribute("totalAdmins", totalAdmins);

	    return "/config_main";
	}
	
	/* 아래 코드들은 회원가입과 로그인 파트 */
	
	// 아이디 중복 체크
	@RequestMapping("/checkUsername.do")
	@ResponseBody
	public String checkUsername(datadto dto, HttpServletRequest req, Model m) throws Exception {
		String username = req.getParameter("username");
		dto.setUsername(username);
		boolean isDuplicate = sm.checkUsername(dto);
		return isDuplicate ? "duplicate" : "available";
	}
	
	//회원가입
	@RequestMapping("/admin_ship.do")
	public String test(datadto dto, HttpServletRequest req, Model m) throws Exception {
		// 회원가입 시 근무중 형식으로 반환
		if (dto.getStatus() == null) {
		    dto.setStatus("근무중");
		}
		
		//전화번호 점검
		String phoneNumber = req.getParameter("phone_number");
		String phoneNumber1 = req.getParameter("phone_number1");
		String fullPhoneNumber = phoneNumber + phoneNumber1;
		dto.setPhone_number(fullPhoneNumber);
		
		//패스워드 암호화
		MessageDigest md = MessageDigest.getInstance("SHA-256");
		if (dto.getPassword() != null) {
		    md.update(dto.getPassword().getBytes());
		    byte[] byteData = md.digest();
		    StringBuilder sb = new StringBuilder();
		    for (int i = 0; i < byteData.length; i++) {
		        sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
		    }
		    String encryptedPassword = sb.toString();
		    dto.setPassword(encryptedPassword);
		} else {
		    throw new IllegalArgumentException("암호는 null일 수 없습니다.");
		}
		
		//데이터베이스에 저장
		sm.insert(dto);
		m.addAttribute("msg", "회원가입이 완료되었습니다.");
		return "/admin_ship";
	}
	
	//로그인
	@RequestMapping("/index.do")
	public String login(datadto dto, HttpServletRequest req, Model m) throws Exception {
		// 현황이 '근무중'인지 확인
		String currentStatus = sm.getCurrentStatus(dto);
		if (!"근무중".equals(currentStatus)) {
		    req.getSession().setAttribute("msg", "근무 중이 아니어서 로그인이 불가능합니다.");
		    return "redirect:/";
		}
	    
		// 로그인 시도 횟수를 가져옵니다.
	    int loginAttempts = sm.getLoginAttempts(dto);
	    
	    if (loginAttempts >= 5) {
	        // 로그인 시도 횟수가 5회 이상이면 상태를 "퇴직중"으로 변경
	    	dto.setStatus("퇴직중");
	    	sm.updateStatus(dto);
	    	sm.resetLoginAttempts(dto);
	        req.getSession().setAttribute("msg", "5회 이상 로그인에 실패하여 접속이 차단되었습니다.");
	        return "redirect:/";
	    } else {
	        // 비밀번호를 암호화합니다.
	        MessageDigest md = MessageDigest.getInstance("SHA-256");
	        if (dto.getPassword() != null) {
	            md.update(dto.getPassword().getBytes());
	            byte[] byteData = md.digest();
	            StringBuilder sb = new StringBuilder();
	            for (int i = 0; i < byteData.length; i++) {
	                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
	            }
	            String encryptedPassword = sb.toString();
	            dto.setPassword(encryptedPassword);
	        } else {
	            throw new IllegalArgumentException("암호는 null일 수 없습니다.");
	        }
	        
	        // 아이디와 비밀번호를 확인합니다.
	        boolean loginSuccess = sm.checkLogin(dto);
	        
	        if (loginSuccess) {
	            // 로그인 성공시 로그인 시도 횟수를 초기화하고 상태를 '근무중'으로 변경
	        	dto.setStatus("근무중");
	        	sm.updateStatus(dto);
	            sm.resetLoginAttempts(dto);
	            
	            // 세션에 사용자 정보 저장
	            req.getSession().setAttribute("username", dto.getUsername());
	            req.getSession().setAttribute("name", dto.getName());
	            
	            req.getSession().setAttribute("msg", "로그인에 성공하였습니다.");
	            return "redirect:/";
	        } else {
	            // 로그인에 실패하면 로그인 시도 횟수를 증가시킵니다.
	            sm.increaseLoginAttempts(dto);
	            req.getSession().setAttribute("msg", "아이디 또는 비밀번호가 잘못되었습니다.");
	            return "redirect:/";
	        }
	    }
	}
	
	//로그아웃 처리
	@RequestMapping("/logout.do")
	public String logout(HttpServletRequest req) {
		req.getSession().invalidate(); // 세선 정보를 초기화
		RedirectAttributes
		return "redirect:/";
	}
	
	//로그인/로그아웃 상태에 따른 페이지 접근 제한
	@RequestMapping("/someSecurePage.do")
	public String someSecurePage(HttpServletRequest req, Model m) {
	    String username = (String) req.getSession().getAttribute("username");

	    if (username == null || username.isEmpty()) {
	        return "redirect:/";
	    }
	    
	    return "index";
	}
}